"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const utility_1 = require("@schematics/angular/utility");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
const change_1 = require("@schematics/angular/utility/change");
const ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
const path_1 = require("path");
const ts = require("typescript");
function default_1(options) {
    return async (host, context) => {
        const workspace = await (0, utility_1.readWorkspace)(host);
        const project = workspace.projects.get(options.project);
        if (project.extensions.projectType !== 'application') {
            throw new schematics_1.SchematicsException(`Universal requires a project type of "application".`);
        }
        const clientBuildTarget = project.targets.get('build');
        if (!clientBuildTarget) {
            throw new schematics_1.SchematicsException(`Project target "build" not found.`);
        }
        if (!options.skipInstall) {
            context.addTask(new tasks_1.NodePackageInstallTask());
        }
        return (0, schematics_1.chain)([
            augmentAppModuleRule(project, clientBuildTarget, options),
            options.ssr ? addSSRRule(project, clientBuildTarget) : (0, schematics_1.noop)(),
            options.prerender
                ? (0, utility_1.addDependency)('@nguniversal/builders', '~14.1.0', {
                    type: utility_1.DependencyType.Dev,
                })
                : (0, schematics_1.noop)(),
            addScriptsRule(options),
            updateWorkspaceRule(options),
        ]);
    };
}
exports.default = default_1;
function addSSRRule(project, buildTarget) {
    return async () => {
        var _a;
        const templateSource = (0, schematics_1.apply)((0, schematics_1.url)('./files/src'), [
            (0, schematics_1.applyTemplates)({}),
            (0, schematics_1.move)((_a = project.sourceRoot) !== null && _a !== void 0 ? _a : '/src'),
        ]);
        const rootSource = (0, schematics_1.apply)((0, schematics_1.url)('./files/root'), [
            (0, schematics_1.applyTemplates)({
                tsConfigExtends: (0, core_1.basename)((0, core_1.normalize)(buildTarget.options.tsConfig)),
                relativePathToWorkspaceRoot: relativePathToWorkspaceRoot(project.root),
            }),
            (0, schematics_1.move)(project.root),
        ]);
        return (0, schematics_1.chain)([
            (0, utility_1.addDependency)('express', '^4.15.2', {
                type: utility_1.DependencyType.Default,
            }),
            (0, utility_1.addDependency)('@types/express', '^4.17.0', {
                type: utility_1.DependencyType.Dev,
            }),
            (0, schematics_1.mergeWith)(templateSource),
            (0, schematics_1.mergeWith)(rootSource),
        ]);
    };
}
function addScriptsRule(options) {
    return async (host) => {
        const pkgPath = '/package.json';
        const buffer = host.read(pkgPath);
        if (!buffer) {
            throw new schematics_1.SchematicsException('Could not find package.json');
        }
        const pkg = JSON.parse(buffer.toString());
        if (options.prerender) {
            pkg.scripts = {
                ...pkg.scripts,
                'prerender': `ng run ${options.project}:prerender`,
            };
        }
        if (options.ssr) {
            pkg.scripts = {
                ...pkg.scripts,
                'build:client-and-server': `ng build ${options.project} && ng run ${options.project}:server`,
                'build:server': `ng run ${options.project}:server`,
                'serve:ssr': `node dist/${options.project}/server/main.js`,
            };
        }
        host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
    };
}
function updateWorkspaceRule(options) {
    return (0, utility_1.updateWorkspace)((workspace) => {
        var _a, _b;
        const project = workspace.projects.get(options.project);
        if (options.ssr) {
            project.targets.add({
                name: 'server',
                builder: '@angular-devkit/build-angular:server',
                options: {
                    outputPath: `dist/${options.project}/server`,
                    main: path_1.posix.join((_a = project.sourceRoot) !== null && _a !== void 0 ? _a : '', 'server.ts'),
                    tsConfig: path_1.posix.join(project.root, 'tsconfig.server.json'),
                    bundleDependencies: false,
                    optimization: false,
                },
            });
            const buildTarget = project.targets.get('build');
            if ((_b = project.targets.get('build')) === null || _b === void 0 ? void 0 : _b.options) {
                buildTarget.options.outputPath = `dist/${options.project}/browser`;
            }
        }
        if (options.prerender) {
            project.targets.add({
                name: 'prerender',
                builder: '@nguniversal/builders:static-generator',
                defaultConfiguration: 'production',
                options: {},
                configurations: {
                    production: {
                        browserTarget: `${options.project}:build:production`,
                    },
                    development: {
                        browserTarget: `${options.project}:build:development`,
                    },
                },
            });
        }
    });
}
function augmentAppModuleRule(project, buildTarget, options) {
    return (host) => {
        const bootstrapModuleRelativePath = (0, ng_ast_utils_1.findBootstrapModulePath)(host, buildTarget.options.main);
        const bootstrapModulePath = (0, core_1.normalize)(`/${project.sourceRoot}/${bootstrapModuleRelativePath}.ts`);
        // Add BrowserModule.withServerTransition()
        const browserModuleImport = findBrowserModuleImport(host, bootstrapModulePath);
        const transitionCall = `.withServerTransition({ appId: '${options.appId}' })`;
        const position = browserModuleImport.pos + browserModuleImport.getFullText().length;
        const transitionCallChange = new change_1.InsertChange(bootstrapModulePath, position, transitionCall);
        const transitionCallRecorder = host.beginUpdate(bootstrapModulePath);
        transitionCallRecorder.insertLeft(transitionCallChange.pos, transitionCallChange.toAdd);
        host.commitUpdate(transitionCallRecorder);
        // Add @nguniversal/common/clover
        let changes = (0, ast_utils_1.addImportToModule)(getSourceFile(host, bootstrapModulePath), bootstrapModulePath, 'RendererModule.forRoot()', '@nguniversal/common/clover');
        let recorder = host.beginUpdate(bootstrapModulePath);
        (0, change_1.applyToUpdateRecorder)(recorder, changes);
        host.commitUpdate(recorder);
        changes = (0, ast_utils_1.addImportToModule)(getSourceFile(host, bootstrapModulePath), bootstrapModulePath, 'TransferHttpCacheModule', '@nguniversal/common/clover');
        recorder = host.beginUpdate(bootstrapModulePath);
        (0, change_1.applyToUpdateRecorder)(recorder, changes);
        host.commitUpdate(recorder);
    };
}
function relativePathToWorkspaceRoot(projectRoot) {
    const normalizedPath = (0, core_1.split)((0, core_1.normalize)(projectRoot || ''));
    if (normalizedPath.length === 0 || !normalizedPath[0]) {
        return '.';
    }
    else {
        return normalizedPath.map(() => '..').join('/');
    }
}
function findBrowserModuleImport(host, modulePath) {
    const source = getSourceFile(host, modulePath);
    const decoratorMetadata = (0, ast_utils_1.getDecoratorMetadata)(source, 'NgModule', '@angular/core')[0];
    const browserModuleNode = (0, ast_utils_1.findNode)(decoratorMetadata, ts.SyntaxKind.Identifier, 'BrowserModule');
    if (!browserModuleNode) {
        throw new schematics_1.SchematicsException(`Cannot find BrowserModule import in ${modulePath}`);
    }
    return browserModuleNode;
}
function getSourceFile(host, path) {
    const buffer = host.read(path);
    if (!buffer) {
        throw new schematics_1.SchematicsException(`Could not find ${path}.`);
    }
    const content = buffer.toString();
    const source = ts.createSourceFile(path, content, ts.ScriptTarget.Latest, true);
    return source;
}
//# sourceMappingURL=data:application/json;base64,