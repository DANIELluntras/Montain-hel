/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { INITIAL_CONFIG, renderModule } from '@angular/platform-server';
import { ÉµInlineCriticalCssProcessor as InlineCriticalCssProcessor } from '@nguniversal/common/tools';
import * as fs from 'fs';
import { dirname, resolve } from 'path';
import { URL } from 'url';
/**
 * A common rendering engine utility. This abstracts the logic
 * for handling the platformServer compiler, the module cache, and
 * the document loader
 */
export class CommonEngine {
    constructor(module, providers = []) {
        this.module = module;
        this.providers = providers;
        this.templateCache = new Map();
        this.pageExists = new Map();
        this.inlineCriticalCssProcessor = new InlineCriticalCssProcessor({
            minify: true,
        });
    }
    /**
     * Render an HTML document for a specific URL with specified
     * render options
     */
    async render(opts) {
        const { inlineCriticalCss = true } = opts;
        if (opts.publicPath && opts.documentFilePath && opts.url !== undefined) {
            const url = new URL(opts.url);
            // Remove leading forward slash.
            const pathname = url.pathname.substring(1);
            const pagePath = resolve(opts.publicPath, pathname, 'index.html');
            if (pagePath !== resolve(opts.documentFilePath)) {
                // View path doesn't match with prerender path.
                let pageExists = this.pageExists.get(pagePath);
                if (pageExists === undefined) {
                    pageExists = await exists(pagePath);
                    this.pageExists.set(pagePath, pageExists);
                }
                if (pageExists) {
                    // Serve pre-rendered page.
                    return fs.promises.readFile(pagePath, 'utf-8');
                }
            }
        }
        // if opts.document dosen't exist then opts.documentFilePath must
        const extraProviders = [...(opts.providers || []), ...(this.providers || [])];
        let doc = opts.document;
        if (!doc && opts.documentFilePath) {
            doc = await this.getDocument(opts.documentFilePath);
        }
        if (doc) {
            extraProviders.push({
                provide: INITIAL_CONFIG,
                useValue: {
                    document: inlineCriticalCss
                        ? // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64
                            doc.replace(/ media="print" onload="this\.media='all'"><noscript><link .+?><\/noscript>/g, '>')
                        : doc,
                    url: opts.url,
                },
            });
        }
        const moduleOrFactory = this.module || opts.bootstrap;
        const html = await renderModule(moduleOrFactory, { extraProviders });
        if (!inlineCriticalCss) {
            return html;
        }
        const { content, errors, warnings } = await this.inlineCriticalCssProcessor.process(html, {
            outputPath: opts.publicPath ?? (opts.documentFilePath ? dirname(opts.documentFilePath) : ''),
        });
        // eslint-disable-next-line no-console
        warnings?.forEach((m) => console.warn(m));
        // eslint-disable-next-line no-console
        errors?.forEach((m) => console.error(m));
        return content;
    }
    /** Retrieve the document from the cache or the filesystem */
    async getDocument(filePath) {
        let doc = this.templateCache.get(filePath);
        if (!doc) {
            doc = await fs.promises.readFile(filePath, 'utf-8');
            this.templateCache.set(filePath, doc);
        }
        return doc;
    }
}
async function exists(path) {
    try {
        await fs.promises.access(path, fs.constants.F_OK);
        return true;
    }
    catch {
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5naW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9jb21tb24vZW5naW5lL3NyYy9lbmdpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0gsT0FBTyxFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsMkJBQTJCLElBQUksMEJBQTBCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN0RyxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUN6QixPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBcUIxQjs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLFlBQVk7SUFLdkIsWUFBb0IsTUFBaUIsRUFBVSxZQUE4QixFQUFFO1FBQTNELFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUF1QjtRQUo5RCxrQkFBYSxHQUFHLElBQUksR0FBRyxFQUFrQixDQUFDO1FBRTFDLGVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBbUIsQ0FBQztRQUd2RCxJQUFJLENBQUMsMEJBQTBCLEdBQUcsSUFBSSwwQkFBMEIsQ0FBQztZQUMvRCxNQUFNLEVBQUUsSUFBSTtTQUNiLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQW1CO1FBQzlCLE1BQU0sRUFBRSxpQkFBaUIsR0FBRyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFMUMsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtZQUN0RSxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJ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QUM7SUFFRCw2REFBNkQ7SUFDckQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFnQjtRQUN4QyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN2QztRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztDQUNGO0FBRUQsS0FBSyxVQUFVLE1BQU0sQ0FBQyxJQUFpQjtJQUNyQyxJQUFJO1FBQ0YsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVsRCxPQUFPLElBQUksQ0FBQztLQUNiO0lBQUMsTUFBTTtRQUNOLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB0eXBlIHsgU3RhdGljUHJvdmlkZXIsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElOSVRJQUxfQ09ORklHLCByZW5kZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1zZXJ2ZXInO1xuaW1wb3J0IHsgybVJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvciBhcyBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvciB9IGZyb20gJ0BuZ3VuaXZlcnNhbC9jb21tb24vdG9vbHMnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgZGlybmFtZSwgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgVVJMIH0gZnJvbSAndXJsJztcblxuLyoqIFRoZXNlIGFyZSB0aGUgYWxsb3dlZCBvcHRpb25zIGZvciB0aGUgcmVuZGVyICovXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlck9wdGlvbnMge1xuICBib290c3RyYXA6IFR5cGU8e30+O1xuICBwcm92aWRlcnM/OiBTdGF0aWNQcm92aWRlcltdO1xuICB1cmw/OiBzdHJpbmc7XG4gIGRvY3VtZW50Pzogc3RyaW5nO1xuICBkb2N1bWVudEZpbGVQYXRoPzogc3RyaW5nO1xuICAvKipcbiAgICogUmVkdWNlIHJlbmRlciBibG9ja2luZyByZXF1ZXN0cyBieSBpbmxpbmluZyBjcml0aWNhbCBDU1MuXG4gICAqIERlZmF1bHRzIHRvIHRydWUuXG4gICAqL1xuICBpbmxpbmVDcml0aWNhbENzcz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBCYXNlIHBhdGggbG9jYXRpb24gb2YgaW5kZXggZmlsZS5cbiAgICogRGVmYXVsdHMgdG8gdGhlICdkb2N1bWVudEZpbGVQYXRoJyBkaXJuYW1lIHdoZW4gbm90IHByb3ZpZGVkLlxuICAgKi9cbiAgcHVibGljUGF0aD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIGNvbW1vbiByZW5kZXJpbmcgZW5naW5lIHV0aWxpdHkuIFRoaXMgYWJzdHJhY3RzIHRoZSBsb2dpY1xuICogZm9yIGhhbmRsaW5nIHRoZSBwbGF0Zm9ybVNlcnZlciBjb21waWxlciwgdGhlIG1vZHVsZSBjYWNoZSwgYW5kXG4gKiB0aGUgZG9jdW1lbnQgbG9hZGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21tb25FbmdpbmUge1xuICBwcml2YXRlIHJlYWRvbmx5IHRlbXBsYXRlQ2FjaGUgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xuICBwcml2YXRlIHJlYWRvbmx5IGlubGluZUNyaXRpY2FsQ3NzUHJvY2Vzc29yOiBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvcjtcbiAgcHJpdmF0ZSByZWFkb25seSBwYWdlRXhpc3RzID0gbmV3IE1hcDxzdHJpbmcsIGJvb2xlYW4+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtb2R1bGU/OiBUeXBlPHt9PiwgcHJpdmF0ZSBwcm92aWRlcnM6IFN0YXRpY1Byb3ZpZGVyW10gPSBbXSkge1xuICAgIHRoaXMuaW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3IgPSBuZXcgSW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3Ioe1xuICAgICAgbWluaWZ5OiB0cnVlLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciBhbiBIVE1MIGRvY3VtZW50IGZvciBhIHNwZWNpZmljIFVSTCB3aXRoIHNwZWNpZmllZFxuICAgKiByZW5kZXIgb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgcmVuZGVyKG9wdHM6IFJlbmRlck9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHsgaW5saW5lQ3JpdGljYWxDc3MgPSB0cnVlIH0gPSBvcHRzO1xuXG4gICAgaWYgKG9wdHMucHVibGljUGF0aCAmJiBvcHRzLmRvY3VtZW50RmlsZVBhdGggJiYgb3B0cy51cmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChvcHRzLnVybCk7XG4gICAgICAvLyBSZW1vdmUgbGVhZGluZyBmb3J3YXJkIHNsYXNoLlxuICAgICAgY29uc3QgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWUuc3Vic3RyaW5nKDEpO1xuICAgICAgY29uc3QgcGFnZVBhdGggPSByZXNvbHZlKG9wdHMucHVibGljUGF0aCwgcGF0aG5hbWUsICdpbmRleC5odG1sJyk7XG5cbiAgICAgIGlmIChwYWdlUGF0aCAhPT0gcmVzb2x2ZShvcHRzLmRvY3VtZW50RmlsZVBhdGgpKSB7XG4gICAgICAgIC8vIFZpZXcgcGF0aCBkb2Vzbid0IG1hdGNoIHdpdGggcHJlcmVuZGVyIHBhdGguXG4gICAgICAgIGxldCBwYWdlRXhpc3RzID0gdGhpcy5wYWdlRXhpc3RzLmdldChwYWdlUGF0aCk7XG4gICAgICAgIGlmIChwYWdlRXhpc3RzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwYWdlRXhpc3RzID0gYXdhaXQgZXhpc3RzKHBhZ2VQYXRoKTtcbiAgICAgICAgICB0aGlzLnBhZ2VFeGlzdHMuc2V0KHBhZ2VQYXRoLCBwYWdlRXhpc3RzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYWdlRXhpc3RzKSB7XG4gICAgICAgICAgLy8gU2VydmUgcHJlLXJlbmRlcmVkIHBhZ2UuXG4gICAgICAgICAgcmV0dXJuIGZzLnByb21pc2VzLnJlYWRGaWxlKHBhZ2VQYXRoLCAndXRmLTgnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIG9wdHMuZG9jdW1lbnQgZG9zZW4ndCBleGlzdCB0aGVuIG9wdHMuZG9jdW1lbnRGaWxlUGF0aCBtdXN0XG4gICAgY29uc3QgZXh0cmFQcm92aWRlcnMgPSBbLi4uKG9wdHMucHJvdmlkZXJzIHx8IFtdKSwgLi4uKHRoaXMucHJvdmlkZXJzIHx8IFtdKV07XG5cbiAgICBsZXQgZG9jID0gb3B0cy5kb2N1bWVudDtcbiAgICBpZiAoIWRvYyAmJiBvcHRzLmRvY3VtZW50RmlsZVBhdGgpIHtcbiAgICAgIGRvYyA9IGF3YWl0IHRoaXMuZ2V0RG9jdW1lbnQob3B0cy5kb2N1bWVudEZpbGVQYXRoKTtcbiAgICB9XG5cbiAgICBpZiAoZG9jKSB7XG4gICAgICBleHRyYVByb3ZpZGVycy5wdXNoKHtcbiAgICAgICAgcHJvdmlkZTogSU5JVElBTF9DT05GSUcsXG4gICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgZG9jdW1lbnQ6IGlubGluZUNyaXRpY2FsQ3NzXG4gICAgICAgICAgICA/IC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDaHJvbWVMYWJzL2NyaXR0ZXJzL2lzc3Vlcy82NFxuICAgICAgICAgICAgICBkb2MucmVwbGFjZShcbiAgICAgICAgICAgICAgICAvIG1lZGlhPVwicHJpbnRcIiBvbmxvYWQ9XCJ0aGlzXFwubWVkaWE9J2FsbCdcIj48bm9zY3JpcHQ+PGxpbmsgLis/PjxcXC9ub3NjcmlwdD4vZyxcbiAgICAgICAgICAgICAgICAnPicsXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogZG9jLFxuICAgICAgICAgIHVybDogb3B0cy51cmwsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBtb2R1bGVPckZhY3RvcnkgPSB0aGlzLm1vZHVsZSB8fCBvcHRzLmJvb3RzdHJhcDtcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyTW9kdWxlKG1vZHVsZU9yRmFjdG9yeSwgeyBleHRyYVByb3ZpZGVycyB9KTtcbiAgICBpZiAoIWlubGluZUNyaXRpY2FsQ3NzKSB7XG4gICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IGNvbnRlbnQsIGVycm9ycywgd2FybmluZ3MgfSA9IGF3YWl0IHRoaXMuaW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3IucHJvY2VzcyhodG1sLCB7XG4gICAgICBvdXRwdXRQYXRoOiBvcHRzLnB1YmxpY1BhdGggPz8gKG9wdHMuZG9jdW1lbnRGaWxlUGF0aCA/IGRpcm5hbWUob3B0cy5kb2N1bWVudEZpbGVQYXRoKSA6ICcnKSxcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgd2FybmluZ3M/LmZvckVhY2goKG0pID0+IGNvbnNvbGUud2FybihtKSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBlcnJvcnM/LmZvckVhY2goKG0pID0+IGNvbnNvbGUuZXJyb3IobSkpO1xuXG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICAvKiogUmV0cmlldmUgdGhlIGRvY3VtZW50IGZyb20gdGhlIGNhY2hlIG9yIHRoZSBmaWxlc3lzdGVtICovXG4gIHByaXZhdGUgYXN5bmMgZ2V0RG9jdW1lbnQoZmlsZVBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgbGV0IGRvYyA9IHRoaXMudGVtcGxhdGVDYWNoZS5nZXQoZmlsZVBhdGgpO1xuXG4gICAgaWYgKCFkb2MpIHtcbiAgICAgIGRvYyA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKGZpbGVQYXRoLCAndXRmLTgnKTtcbiAgICAgIHRoaXMudGVtcGxhdGVDYWNoZS5zZXQoZmlsZVBhdGgsIGRvYyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRvYztcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBleGlzdHMocGF0aDogZnMuUGF0aExpa2UpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy5wcm9taXNlcy5hY2Nlc3MocGF0aCwgZnMuY29uc3RhbnRzLkZfT0spO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl19