{"version":3,"file":"common.mjs","sources":["../../../../../../modules/common/src/transfer_http.ts","../../../../../../modules/common/src/state-transfer-initializer/module.ts","../../../../../../modules/common/private_api.ts","../../../../../../modules/common/public_api.ts","../../../../../../modules/common/index.ts","../../../../../../modules/common/common.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  HTTP_INTERCEPTORS,\n  HttpEvent,\n  HttpHandler,\n  HttpHeaders,\n  HttpInterceptor,\n  HttpParams,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { ApplicationRef, Injectable, NgModule } from '@angular/core';\nimport {\n  BrowserTransferStateModule,\n  StateKey,\n  TransferState,\n  makeStateKey,\n} from '@angular/platform-browser';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\n\ntype ResponseType = HttpRequest<unknown>['responseType'];\n\nexport interface TransferHttpResponse {\n  body?: any | null;\n  headers?: Record<string, string[]>;\n  status?: number;\n  statusText?: string;\n  url?: string;\n  responseType?: ResponseType;\n}\n\nfunction getHeadersMap(headers: HttpHeaders): Record<string, string[]> {\n  const headersMap: Record<string, string[]> = {};\n  for (const key of headers.keys()) {\n    const values = headers.getAll(key);\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n\n  return headersMap;\n}\n\n@Injectable()\nexport class TransferHttpCacheInterceptor implements HttpInterceptor {\n  private isCacheActive = true;\n\n  private invalidateCacheEntry(url: string) {\n    Object.keys(this.transferState['store']).forEach((key) =>\n      key.includes(url) ? this.transferState.remove(makeStateKey(key)) : null,\n    );\n  }\n\n  private makeCacheKey(\n    method: string,\n    url: string,\n    params: HttpParams,\n    responseType: ResponseType,\n  ): StateKey<TransferHttpResponse> {\n    // make the params encoded same as a url so it's easy to identify\n    const encodedParams = params\n      .keys()\n      .sort()\n      .map((k) => `${k}=${params.getAll(k)}`)\n      .join('&');\n\n    const key = (method === 'GET' ? 'G.' : 'H.') + responseType + '.' + url + '?' + encodedParams;\n\n    return makeStateKey<TransferHttpResponse>(key);\n  }\n\n  constructor(appRef: ApplicationRef, private transferState: TransferState) {\n    // Stop using the cache if the application has stabilized, indicating initial rendering is\n    // complete.\n    appRef.isStable\n      .pipe(\n        filter((isStable: boolean) => isStable),\n        take(1),\n      )\n      .subscribe(() => {\n        this.isCacheActive = false;\n      });\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Stop using the cache if there is a mutating call.\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      this.isCacheActive = false;\n      this.invalidateCacheEntry(req.url);\n    }\n\n    if (!this.isCacheActive) {\n      // Cache is no longer active. Pass the request through.\n      return next.handle(req);\n    }\n\n    const storeKey = this.makeCacheKey(req.method, req.url, req.params, req.responseType);\n\n    if (this.transferState.hasKey(storeKey)) {\n      // Request found in cache. Respond using it.\n      const response = this.transferState.get(storeKey, {});\n      let body: ArrayBuffer | Blob | string | undefined = response.body;\n\n      switch (response.responseType) {\n        case 'arraybuffer':\n          {\n            // If we're in Node...\n            if (typeof Buffer !== 'undefined') {\n              const buf = Buffer.from(response.body);\n              body = new ArrayBuffer(buf.length);\n              const view = new Uint8Array(body);\n              for (let i = 0; i < buf.length; ++i) {\n                view[i] = buf[i];\n              }\n            } else if (typeof TextEncoder !== 'undefined') {\n              // Modern browsers implement TextEncode.\n              body = new TextEncoder().encode(response.body).buffer;\n            }\n          }\n          break;\n        case 'blob':\n          body = new Blob([response.body]);\n          break;\n      }\n\n      return observableOf(\n        new HttpResponse<any>({\n          body,\n          headers: new HttpHeaders(response.headers),\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n        }),\n      );\n    } else {\n      // Request not found in cache. Make the request and cache it.\n      const httpEvent = next.handle(req);\n\n      return httpEvent.pipe(\n        tap((event: HttpEvent<unknown>) => {\n          if (event instanceof HttpResponse) {\n            this.transferState.set<TransferHttpResponse>(storeKey, {\n              body: event.body,\n              headers: getHeadersMap(event.headers),\n              status: event.status,\n              statusText: event.statusText,\n              url: event.url || '',\n              responseType: req.responseType,\n            });\n          }\n        }),\n      );\n    }\n  }\n}\n\n/**\n * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP\n * calls from the server to the client application.\n */\n@NgModule({\n  imports: [BrowserTransferStateModule],\n  providers: [\n    TransferHttpCacheInterceptor,\n    { provide: HTTP_INTERCEPTORS, useExisting: TransferHttpCacheInterceptor, multi: true },\n  ],\n})\nexport class TransferHttpCacheModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { DOCUMENT } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\n\nexport function domContentLoadedFactory(doc: Document): () => Promise<void> {\n  return () =>\n    new Promise((resolve, _reject) => {\n      if (doc.readyState === 'complete' || doc.readyState === 'interactive') {\n        resolve();\n\n        return;\n      }\n\n      const contentLoaded = () => {\n        doc.removeEventListener('DOMContentLoaded', contentLoaded);\n        resolve();\n      };\n\n      doc.addEventListener('DOMContentLoaded', contentLoaded);\n    });\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: domContentLoadedFactory,\n      deps: [DOCUMENT],\n    },\n  ],\n})\nexport class StateTransferInitializerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { TransferHttpCacheInterceptor as ÉµTransferHttpCacheInterceptor } from './src/transfer_http';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { TransferHttpCacheModule } from './src/transfer_http';\nexport { StateTransferInitializerModule } from './src/state-transfer-initializer/module';\nexport * from './private_api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["observableOf"],"mappings":"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"}