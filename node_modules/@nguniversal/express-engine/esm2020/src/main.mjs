/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { CommonEngine } from '@nguniversal/common/engine';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';
/**
 * This is an express engine for handling Angular Applications
 */
export function ngExpressEngine(setupOptions) {
    const engine = new CommonEngine(setupOptions.bootstrap, setupOptions.providers);
    return function (filePath, options, callback) {
        try {
            const renderOptions = { ...options };
            if (!setupOptions.bootstrap && !renderOptions.bootstrap) {
                throw new Error('You must pass in a NgModule to be bootstrapped');
            }
            const { req } = renderOptions;
            const res = renderOptions.res ?? req.res;
            renderOptions.url =
                renderOptions.url ?? `${req.protocol}://${req.get('host') || ''}${req.baseUrl}${req.url}`;
            renderOptions.documentFilePath = renderOptions.documentFilePath ?? filePath;
            renderOptions.providers = [...(renderOptions.providers ?? []), getReqResProviders(req, res)];
            // eslint-disable-next-line @typescript-eslint/no-unused-expressions
            renderOptions.publicPath =
                renderOptions.publicPath ?? setupOptions.publicPath ?? options.settings?.views;
            renderOptions.inlineCriticalCss =
                renderOptions.inlineCriticalCss ?? setupOptions.inlineCriticalCss;
            engine
                .render(renderOptions)
                .then((html) => callback(null, html))
                .catch(callback);
        }
        catch (err) {
            callback(err);
        }
    };
}
/**
 * Get providers of the request and response
 */
function getReqResProviders(req, res) {
    const providers = [
        {
            provide: REQUEST,
            useValue: req,
        },
    ];
    if (res) {
        providers.push({
            provide: RESPONSE,
            useValue: res,
        });
    }
    return providers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvZXhwcmVzcy1lbmdpbmUvc3JjL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0gsT0FBTyxFQUFFLFlBQVksRUFBd0MsTUFBTSw0QkFBNEIsQ0FBQztBQUNoRyxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBbUJ2RTs7R0FFRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsWUFBc0M7SUFDcEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFaEYsT0FBTyxVQUNMLFFBQWdCLEVBQ2hCLE9BQWUsRUFDZixRQUFxRDtRQUVyRCxJQUFJO1lBQ0YsTUFBTSxhQUFhLEdBQUcsRUFBRSxHQUFHLE9BQU8sRUFBbUIsQ0FBQztZQUN0RCxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUU7Z0JBQ3ZELE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQzthQUNuRTtZQUVELE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxhQUFhLENBQUM7WUFDOUIsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDO1lBRXpDLGFBQWEsQ0FBQyxHQUFHO2dCQUNmLGFBQWEsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQzVGLGFBQWEsQ0FBQyxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsZ0JBQWdCLElBQUksUUFBUSxDQUFDO1lBQzVFLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM3RixvRUFBb0U7WUFDcEUsYUFBYSxDQUFDLFVBQVU7Z0JBQ3RCLGFBQWEsQ0FBQyxVQUFVLElBQUksWUFBWSxDQUFDLFVBQVUsSUFBSyxPQUFlLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQztZQUMxRixhQUFhLENBQUMsaUJBQWlCO2dCQUM3QixhQUFhLENBQUMsaUJBQWlCLElBQUksWUFBWSxDQUFDLGlCQUFpQixDQUFDO1lBRXBFLE1BQU07aUJBQ0gsTUFBTSxDQUFDLGFBQWEsQ0FBQztpQkFDckIsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2lCQUNwQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDcEI7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNmO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxrQkFBa0IsQ0FBQyxHQUFZLEVBQUUsR0FBYztJQUN0RCxNQUFNLFNBQVMsR0FBcUI7UUFDbEM7WUFDRSxPQUFPLEVBQUUsT0FBTztZQUNoQixRQUFRLEVBQUUsR0FBRztTQUNkO0tBQ0YsQ0FBQztJQUNGLElBQUksR0FBRyxFQUFFO1FBQ1AsU0FBUyxDQUFDLElBQUksQ0FBQztZQUNiLE9BQU8sRUFBRSxRQUFRO1lBQ2pCLFFBQVEsRUFBRSxHQUFHO1NBQ2QsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB0eXBlIHsgU3RhdGljUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbkVuZ2luZSwgUmVuZGVyT3B0aW9ucyBhcyBDb21tb25SZW5kZXJPcHRpb25zIH0gZnJvbSAnQG5ndW5pdmVyc2FsL2NvbW1vbi9lbmdpbmUnO1xuaW1wb3J0IHsgUkVRVUVTVCwgUkVTUE9OU0UgfSBmcm9tICdAbmd1bml2ZXJzYWwvZXhwcmVzcy1lbmdpbmUvdG9rZW5zJztcbmltcG9ydCB0eXBlIHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIGFsbG93ZWQgb3B0aW9ucyBmb3IgdGhlIGVuZ2luZVxuICovXG5leHBvcnQgdHlwZSBOZ1NldHVwT3B0aW9ucyA9IFBpY2s8XG4gIENvbW1vblJlbmRlck9wdGlvbnMsXG4gICdib290c3RyYXAnIHwgJ3Byb3ZpZGVycycgfCAncHVibGljUGF0aCcgfCAnaW5saW5lQ3JpdGljYWxDc3MnXG4+O1xuXG4vKipcbiAqIFRoZXNlIGFyZSB0aGUgYWxsb3dlZCBvcHRpb25zIGZvciB0aGUgcmVuZGVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyT3B0aW9ucyBleHRlbmRzIENvbW1vblJlbmRlck9wdGlvbnMge1xuICByZXE6IFJlcXVlc3Q7XG4gIHJlcz86IFJlc3BvbnNlO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYW4gZXhwcmVzcyBlbmdpbmUgZm9yIGhhbmRsaW5nIEFuZ3VsYXIgQXBwbGljYXRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZ0V4cHJlc3NFbmdpbmUoc2V0dXBPcHRpb25zOiBSZWFkb25seTxOZ1NldHVwT3B0aW9ucz4pIHtcbiAgY29uc3QgZW5naW5lID0gbmV3IENvbW1vbkVuZ2luZShzZXR1cE9wdGlvbnMuYm9vdHN0cmFwLCBzZXR1cE9wdGlvbnMucHJvdmlkZXJzKTtcblxuICByZXR1cm4gZnVuY3Rpb24gKFxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXG4gICAgb3B0aW9uczogb2JqZWN0LFxuICAgIGNhbGxiYWNrOiAoZXJyPzogRXJyb3IgfCBudWxsLCBodG1sPzogc3RyaW5nKSA9PiB2b2lkLFxuICApIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVuZGVyT3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9IGFzIFJlbmRlck9wdGlvbnM7XG4gICAgICBpZiAoIXNldHVwT3B0aW9ucy5ib290c3RyYXAgJiYgIXJlbmRlck9wdGlvbnMuYm9vdHN0cmFwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgcGFzcyBpbiBhIE5nTW9kdWxlIHRvIGJlIGJvb3RzdHJhcHBlZCcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IHJlcSB9ID0gcmVuZGVyT3B0aW9ucztcbiAgICAgIGNvbnN0IHJlcyA9IHJlbmRlck9wdGlvbnMucmVzID8/IHJlcS5yZXM7XG5cbiAgICAgIHJlbmRlck9wdGlvbnMudXJsID1cbiAgICAgICAgcmVuZGVyT3B0aW9ucy51cmwgPz8gYCR7cmVxLnByb3RvY29sfTovLyR7cmVxLmdldCgnaG9zdCcpIHx8ICcnfSR7cmVxLmJhc2VVcmx9JHtyZXEudXJsfWA7XG4gICAgICByZW5kZXJPcHRpb25zLmRvY3VtZW50RmlsZVBhdGggPSByZW5kZXJPcHRpb25zLmRvY3VtZW50RmlsZVBhdGggPz8gZmlsZVBhdGg7XG4gICAgICByZW5kZXJPcHRpb25zLnByb3ZpZGVycyA9IFsuLi4ocmVuZGVyT3B0aW9ucy5wcm92aWRlcnMgPz8gW10pLCBnZXRSZXFSZXNQcm92aWRlcnMocmVxLCByZXMpXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICByZW5kZXJPcHRpb25zLnB1YmxpY1BhdGggPVxuICAgICAgICByZW5kZXJPcHRpb25zLnB1YmxpY1BhdGggPz8gc2V0dXBPcHRpb25zLnB1YmxpY1BhdGggPz8gKG9wdGlvbnMgYXMgYW55KS5zZXR0aW5ncz8udmlld3M7XG4gICAgICByZW5kZXJPcHRpb25zLmlubGluZUNyaXRpY2FsQ3NzID1cbiAgICAgICAgcmVuZGVyT3B0aW9ucy5pbmxpbmVDcml0aWNhbENzcyA/PyBzZXR1cE9wdGlvbnMuaW5saW5lQ3JpdGljYWxDc3M7XG5cbiAgICAgIGVuZ2luZVxuICAgICAgICAucmVuZGVyKHJlbmRlck9wdGlvbnMpXG4gICAgICAgIC50aGVuKChodG1sKSA9PiBjYWxsYmFjayhudWxsLCBodG1sKSlcbiAgICAgICAgLmNhdGNoKGNhbGxiYWNrKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEdldCBwcm92aWRlcnMgb2YgdGhlIHJlcXVlc3QgYW5kIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGdldFJlcVJlc1Byb3ZpZGVycyhyZXE6IFJlcXVlc3QsIHJlcz86IFJlc3BvbnNlKTogU3RhdGljUHJvdmlkZXJbXSB7XG4gIGNvbnN0IHByb3ZpZGVyczogU3RhdGljUHJvdmlkZXJbXSA9IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBSRVFVRVNULFxuICAgICAgdXNlVmFsdWU6IHJlcSxcbiAgICB9LFxuICBdO1xuICBpZiAocmVzKSB7XG4gICAgcHJvdmlkZXJzLnB1c2goe1xuICAgICAgcHJvdmlkZTogUkVTUE9OU0UsXG4gICAgICB1c2VWYWx1ZTogcmVzLFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHByb3ZpZGVycztcbn1cbiJdfQ==